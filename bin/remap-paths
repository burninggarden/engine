#!/usr/bin/env node

const FS = require('fs');
const Path = require('path');

const JAVASCRIPT_EXTENSION = '.js';
const UTF8_ENCODING = 'utf8';
const DIST_PATH = Path.resolve(__dirname, '../dist');

function processDirectory(directoryPath) {
	const children = FS.readdirSync(directoryPath);

	children.forEach(function each(child) {
		// Ignore hidden files.
		if (child[0] === '.') {
			return;
		}

		const
			childPath  = Path.resolve(directoryPath, child),
			parsedPath = Path.parse(childPath);

		if (!parsedPath.ext) {
			processDirectory(childPath);
		} else if (parsedPath.ext === JAVASCRIPT_EXTENSION) {
			processFile(childPath);
		}
	});
}

function processFile(filePath) {
	const contents = FS.readFileSync(filePath, UTF8_ENCODING);

	const lines = contents.split('\n').map(function map(line) {
		return line.replace(/require\("([^"]+)/g, function replacer(match, path) {
			if (path[0] === '.') {
				return match;
			}

			const dependencyPath = DIST_PATH + '/src/' + path + '.js';

			if (!FS.existsSync(dependencyPath)) {
				return match;
			}

			const parsedFile = Path.parse(filePath);
			const parsedDependency = Path.parse(dependencyPath);

			let relativeDirectory = Path.relative(parsedFile.dir, parsedDependency.dir);

			if (relativeDirectory === '') {
				relativeDirectory = '.';
			} else {
				relativeDirectory = './' + relativeDirectory;
			}

			const relativePath = relativeDirectory + '/' + parsedDependency.base;

			return 'require("' + relativePath;
		});
	});

	FS.writeFileSync(filePath, lines.join('\n'), UTF8_ENCODING);
}

processDirectory('./dist');
